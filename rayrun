#!/usr/bin/env python3

import ray
import subprocess
import argparse
import sys
from typing import List, Union
import time
import socket
import json
import os
import logging

os.environ["RAY_DEDUP_LOGS"] = "0"
logging.getLogger('ray').setLevel(logging.INFO)

@ray.remote
def run_command(command:str, output_dir):
    """
    Execute a shell command or a Python script.
    """
    if output_dir:
        output_file = os.path.join(output_dir, "stdout")
        error_file = os.path.join(output_dir, "stderr")
        try:
            with open(output_file, 'w') as out_f:
                result = subprocess.run(command, shell=True, check=True, stdout=out_f, stderr=subprocess.PIPE)  # Capture stderr in the result object
            return None
        except subprocess.CalledProcessError as e:
            # Write the error message to the error file and print to stderr
            with open(error_file, 'w') as err_f:
                err_f.write(e.stderr.decode('utf-8'))
            error_message = e.stderr.decode('utf-8') if e.stderr else 'Unknown error'
            print(error_message, file=sys.stderr)
            return e.returncode
    else:
        try:
            result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            print(result.stdout.decode('utf-8'), file=sys.stdout)
            return result.returncode
        except subprocess.CalledProcessError as e:
            error_message = e.stderr.decode('utf-8') if e.stderr else 'Unknown error'
            print(error_message, file=sys.stderr)
            return e.returncode

def parse_input_file(input_file: str) -> List[str]:
    """
    Parse input file to get a list of commands or arguments.
    """
    with open(input_file, 'r') as file:
        return [line.strip() for line in file.readlines()]

def main():
    parser = argparse.ArgumentParser(description="A GNU Parallel-like tool for Ray cluster. Can accept either textfile or piped input for iterables and passes inputs to commands using {} placeholder or {/} as basefile. (e.g.: seq 10 | rayrun  'python script.py {} arg2 | head -n 5')")
    parser.add_argument('command', help="Command template with '{}' as placeholder for input. (e.g. 'python script.py {} arg2 | head -n 10' )")
    parser.add_argument('-t', '--output-code', action='store_true', help="Output the command code that will be executed.")
    parser.add_argument('--results', default=None, help="Directory to save the output and error files for each command.")

    args = parser.parse_args()

    input_list = [line.strip() for line in sys.stdin]
    command_template = args.command

    # Output the command code if -t flag is provided
    if args.output_code:
        print(command_template, file=sys.stderr)

    # Initialize Ray
    ray.init(logging_level=logging.INFO)

    tasks = []
    for input_item in input_list:
        command = command_template.replace('{}', input_item).replace('{/}', os.path.basename(input_item))

        if args.results:
            if not os.path.exists(args.results): os.mkdir(args.results)
            output_dir = os.path.join(args.results, f"{input_item.replace('/', '+z')}")
            if not os.path.exists(output_dir): os.mkdir(output_dir)
        else:
            output_dir = None

        tasks.append(run_command.remote(command, output_dir))

    # Wait for all tasks to complete and get results, then shutdown ray
    ray.get(tasks)
    ray.shutdown(_exiting_interpreter=True)

if __name__ == '__main__':

    main()
