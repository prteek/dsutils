#!/usr/bin/env python3

import sys
import argparse
import subprocess

def get_header(num_rows):
    header = []
    for _ in range(num_rows):
        line = sys.stdin.readline().rstrip('\n')
        if line:
            header.append(line)
    return header

def print_header(header):
    for line in header:
        print(line)

def print_body():
    for line in sys.stdin:
        print(line, end='')

def main():
    parser = argparse.ArgumentParser(description="Add, replace, and delete header lines.")

    parser.add_argument('-n', type=int, default=1, help="Number of lines to consider as header [default: 1]")
    parser.add_argument('-a', help="Add header")
    parser.add_argument('-r', help="Replace header")
    parser.add_argument('-e', help="Apply expression to header")
    parser.add_argument('-d', action='store_true', help="Delete header")

    args = parser.parse_args()

    old_header = get_header(args.n)

    if args.a:
        print_header(args.a.splitlines())
        print_body()
        sys.exit(0)

    if args.d:
        print_body()
        sys.exit(0)

    if args.r:
        print_header(args.r.splitlines())
        print_body()
        sys.exit(0)

    if args.e:
        expr = args.e
        # Join header lines with newlines and process with the given expression
        process = subprocess.Popen(expr, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, text=True)
        processed_header, _ = process.communicate(input="\n".join(old_header) + "\n")
        print_header(processed_header.splitlines())
        print_body()
        sys.exit(0)

    # If no modification, just print the original header
    print_header(old_header)
    print_body()

if __name__ == "__main__":
    main()
